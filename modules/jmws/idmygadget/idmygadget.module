<?php
/*
 * @package jmws_idMyGadget_for_drupal
 *
 * Module Name: idMyGadget
 * Module URI:
 * Description: Integrate idMyGadget with a couple of drupal themes (to start).
 * Author: Tom W Hartung
 * Version: 1.0
 * Author URI: http://tomwhartung.com/
 */
define( 'IDMYGADGET_MODULE_DIR', __DIR__ . DIRECTORY_SEPARATOR . 'idMyGadget' );
require_once( 'idMyGadget/JmwsIdMyGadgetDrupal.php' );
// require_once 'jmws_idMyGadget_for_joomla/PhoneBurgerMenuIcon.php';

print '<p>Hi from jmws_idMyGadget_for_drupal!!</p>';

/**
 * Check the idmygadget object, instantiating it if necessary, and check the installation
 */
$jmwsIdMyGadget = null;
function idMyGadget_page_alter( &$page ) {
  global $jmwsIdMyGadget;

  print '<p>Hi from function idMyGadget_page_alter in idMyGadget.module!!</p>';

  checkJmwsIdMyGadgetObject();
  checkJmwsIdMyGadgetInstallation();
  $jmwsIdMyGadget->initializeJQueryMobileVars();
  //
  // Add in the jQuery Mobile css and js as appropriate
  // Reference: https://ffwagency.com/blog/7-ways-to-add-custom-js-and-css-to-a-page-drupal
  //
  if ( $jmwsIdMyGadget->usingJQueryMobile ) {
    $options = array( 'type' => 'external', 'every_page' => TRUE );
    // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
// 
// 
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_css( JmwsIdMyGadget::JQUERY_MOBILE_CSS_URL, $options );

    // @FIXME
// The Assets API has totally changed. CSS, JavaScript, and libraries are now
// attached directly to render arrays using the #attached property.
// 
// 
// @see https://www.drupal.org/node/2169605
// @see https://www.drupal.org/node/2408597
// drupal_add_js( JmwsIdMyGadget::JQUERY_MOBILE_JS_URL, $options );

  }
}

/**
 * Check the idMyGadget object, instantiating it if necessary
 * This is where we tell it which underlying 3rd-party device detector to use
 * @global object $jmwsIdMyGadget
 */
function checkJmwsIdMyGadgetObject() {
  global $jmwsIdMyGadget;
  if( ! isset($jmwsIdMyGadget) ) {
    // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $gadgetDetectorIndex = variable_get( 'idmg_gadget_detector', 0 );

    $supportedGadgetDetectors = JmwsIdMyGadgetDrupal::$supportedGadgetDetectors;
    $gadgetDetectorString = $supportedGadgetDetectors[$gadgetDetectorIndex];
    $jmwsIdMyGadget = new JmwsIdMyGadgetDrupal( $gadgetDetectorString );
  }
}

/**
 * Calls jmwsIdMyGadget method to check installation of the selected underlying 3rd party
 * device detection software, and if it is missing, displays appropriate message.
 * Note that we can serve the page and all, it will just be the same for all device types.
 */
function checkJmwsIdMyGadgetInstallation() {
  global $jmwsIdMyGadget;

  if ( $jmwsIdMyGadget->isInstalled() ) {
    unset( $jmwsIdMyGadget->errorMessage );
  }
  else {
    $linkToReadmeOnGithub =
      '<a href="' . $jmwsIdMyGadget->getLinkToReadme() . '" class="idmygadget-error" target="_blank">' .
        'the appropriate README.md file on github.</a>';
    $jmwsIdMyGadget->errorMessage = IDMYGADGET_DETECTOR_NOT_INSTALLED_OPENING .
      $linkToReadmeOnGithub . IDMYGADGET_DETECTOR_NOT_INSTALLED_CLOSING;
    drupal_set_message( t($jmwsIdMyGadget->errorMessage), 'error' );
  }
}

/**
 * Implements hook_help().
 */
function idMyGadget_help($path, $arg) {
  switch ($path) {
    case 'admin/help#idMyGadget':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The idMyGadget module provides device detection so we can control what content etc. is sent ot different device types.") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('detect_mobile_browsers') . '</dt>';
      $output .= '<dd>' . t('yadda yadda yadda.') . '</dd>';
      $output .= '</dl>';
      return $output;
    case 'admin/config/idmygadget%':
      // if (user_access('switch shortcut sets')) {
      //   $output = '<p>' . t('Define which shortcut set you are using on the <a href="@shortcut-link">Shortcuts tab</a> of your account page.', array('@shortcut-link' => url("user/{$user->uid}/shortcut    s"))) . '</p>';
      //   return $output;
      // }
      $output = '<p>' . t('Define which gadget detector you are using here.' ) . '</p>';
      return $output;

  }
}

/**
 * @FIXME
 * This implementation of hook_menu() cannot be automatically converted because
 * it contains logic (i.e., branching statements, function calls, object
 * instantiation, etc.) You will need to convert it manually. Sorry!
 *
 * For more information on how to convert hook_menu() to Drupal 8's new routing
 * and linking systems, see https://api.drupal.org/api/drupal/core%21includes%21menu.inc/group/menu/8
 */


function idMyGadget_menu()
{
	$items = array();

	//
	// First add a new section to the Configuration admin option screen
	// Reference: https://www.drupal.org/node/1251942 (bottom of page)
	//
	$items['admin/config/idmygadget'] = array(
		'title' => 'IdMyGadget Settings',
		'description' => 'Settings for device-dependent headings and menus.',
		'position' => 'right',
		// 'weight' => 0,   // where we probably want it (between development and web services)
		'weight' => -17,    // ok for now (nearer top)
		'page callback' => 'system_admin_menu_block_page',            // DO NOT CHANGE THIS!
		'access arguments' => array('administer site configuration'), // Permission needed to view this area
		'file' => 'system.admin.inc',                                 // DO NOT CHANGE THIS!
		'file path' => drupal_get_path('module', 'system'),           // DO NOT CHANGE THIS!
	);
	//
	// Add a section to the module's Settings screen that contains
	// radio buttons allowing the admin to set the device detector.
	// This shows up under Configuration -> IdMyGadget -> Gadget Detector
	//
	$items['admin/config/idmygadget/detector'] = array(
		'title' => 'IdMyGadget Detector Setting',
		'description' => 'Set the IdMyGadget device detector.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('idMyGadget_admin_gadget_detector_fcn'),
		'access arguments' => array('administer idMyGadget settings'),
		'type' => MENU_NORMAL_ITEM,
	);
	//
	// Add a section to the module's Settings screen that allows customizing the heading on specific devices
	// This shows up under Configuration -> IdMyGadget -> IdMyGadget Device-Dependent Headings
	//
	$items['admin/config/idmygadget/heading'] = array(
		'title' => 'IdMyGadget Device-Dependent Headings',
		'description' => 'Customize the heading displayed on phones, tablets, and desktops.',
		'weight' => 0,
		'page callback' => 'system_admin_menu_block_page',            // DO NOT CHANGE THIS!
		'access arguments' => array('administer site configuration'), // Permission needed to view this area
		'file' => 'system.admin.inc',                                 // DO NOT CHANGE THIS!
		'file path' => drupal_get_path('module', 'system'),           // DO NOT CHANGE THIS!
	);
	//
	// Add a section to the module's Settings screen that allows customizing the heading on
	// each gadget type ("phone", "tablet", "desktop")
	// This shows up under Configuration -> IdMyGadget -> IdMyGadget Heading - [gadget_type]
	//
	foreach( JmwsIdMyGadgetDrupal::$gadgetTypes as $gadget_type )
	{
		$gadget_type_plural = $gadget_type . 's';
		$gadget_type_ucfirst = ucfirst( $gadget_type );
		$items_key = 'admin/config/idmygadget/heading/' . $gadget_type_plural;    // e.g., '.../heading/phones'
		$page_arguments_fcn = 'idMyGadget_admin_heading_' . $gadget_type_plural;  // e.g., 'idMyGadget_admin_heading_phones'
		$items[$items_key] = array(
			'title' => 'IdMyGadget Heading - ' . $gadget_type_ucfirst,
			'description' => 'Customize the heading displayed on phones.',
			'page callback' => 'drupal_get_form',
			'page arguments' => array( $page_arguments_fcn ),
			'access arguments' => array('administer idMyGadget settings'),
			'type' => MENU_NORMAL_ITEM,
		);
	}

	//
	// Add a section to the module's Settings screen that allows choosing the jQuery Mobile theme
	// and setting whether the jQuery header and footer menus display on specific device types
	// This shows up under Configuration -> IdMyGadget -> IdMyGadget Device-Dependent Headings
	//
	$items['admin/config/idmygadget/jquerymobilemenus'] = array(
		'title' => 'IdMyGadget Header/Footer Menus',
		'description' => 'Select the jQuery Mobile theme and set the device type(s) for the header and footer menus.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array( 'idMyGadget_admin_jquery_mobile_menus_fcn' ),
		'access arguments' => array('administer idMyGadget settings'),
		'type' => MENU_NORMAL_ITEM,
	);

	return $items;
}
function idMyGadget_admin_jquery_mobile_menus_fcn()
{
	global $jmwsIdMyGadget;
	checkJmwsIdMyGadgetObject();
	$radio_choices = $jmwsIdMyGadget->translatedRadioChoices;

	// @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $form['idmg_jqm_data_theme'] = array(
// 		'#type' => 'select',
// 		'#title' => t( 'jQuery Mobile Theme' ),
// 		'#default_value' => variable_get( 'idmg_jqm_data_theme', JmwsIdMyGadget::$jqueryMobileThemeChoices[0] ),
// 		'#options' => JmwsIdMyGadget::$jqueryMobileThemeChoices,
// 		'#description' => t( 'Select the jQuery Mobile Theme to use for the header and footer menus.' ),
// 		'#required' => TRUE,
// 	);


	// @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $form['idmg_phone_nav_on_phones'] = array(
// 		'#type' => 'radios',
// 		'#title' => t( 'Show Header/Footer Nav on phones?' ),
// 		'#default_value' => variable_get( 'idmg_phone_nav_on_phones', $radio_choices[1] ),
// 		'#options' => $radio_choices,
// 		'#description' => t( 'Select whether the jQuery Header and Footer Nav Menu should appear on phones.' ),
// 		'#required' => FALSE,
// 	);

	// @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $form['idmg_phone_nav_on_tablets'] = array(
// 		'#type' => 'radios',
// 		'#title' => t( 'Show Header/Footer Nav on tablets?' ),
// 		'#default_value' => variable_get( 'idmg_phone_nav_on_tablets', $radio_choices[0] ),
// 		'#options' => $radio_choices,
// 		'#description' => t( 'Select whether the jQuery Header and Footer Nav Menu should appear on tablets.' ),
// 		'#required' => FALSE,
// 	);

	// @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $form['idmg_phone_nav_on_desktops'] = array(
// 		'#type' => 'radios',
// 		'#title' => t( 'Show Header/Footer Nav on desktops?' ),
// 		'#default_value' => variable_get( 'idmg_phone_nav_on_desktops', $radio_choices[0] ),
// 		'#options' => $radio_choices,
// 		'#description' => t( 'Select whether the jQuery Header and Footer Nav Menu should appear on desktops.' ),
// 		'#required' => FALSE,
// 	);

	return system_settings_form( $form );
}
/**
 * Create admin config function to allow selection of which gadget detector to use
 * Reference: https://www.drupal.org/node/206761
 * Example: function system_logging_settings in system/system.admin.inc
 */
function idMyGadget_admin_gadget_detector_fcn()
{
	$supported_gadget_detectors = JmwsIdMyGadgetDrupal::$supportedGadgetDetectors;
	$default_gadget_detector = $supported_gadget_detectors[0];
	$form = array();
	//
	// Add a section to the module's Settings screen that contains
	// radio buttons allowing the admin to set the device detector.
	// This shows up under Configuration -> IdMyGadget -> Gadget Detector
	//
	// @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// $form['idmg_gadget_detector'] = array(
// 		'#type' => 'radios',
// 		'#title' => t('Gadget Detector'),
// 		'#default_value' => variable_get( 'idmg_gadget_detector', $default_gadget_detector ),
// 		'#options' => $supported_gadget_detectors,
// 		'#description' => t('Select the 3rd party device detector to use for this site.'),
// 		'#required' => TRUE,
// 	);


	\Drupal::config('idMyGadget.settings')->clear('idMyGadget_gadget_detector')->save();
	return system_settings_form( $form );
}
/**
 * Admin config function to allow customization of the site heading on phones
 */
function idMyGadget_admin_heading_phones()
{
	$form = idMyGadget_admin_heading( 'phone' );
	return system_settings_form( $form );
}
/**
 * Admin config function to allow customization of the site heading on tablets
 */
function idMyGadget_admin_heading_tablets()
{
	$form = idMyGadget_admin_heading( 'tablet' );
	return system_settings_form( $form );
}
/**
 * Admin config function to allow customization of the site heading on desktops
 */
function idMyGadget_admin_heading_desktops()
{
	$form = idMyGadget_admin_heading( 'desktop' );
	return system_settings_form( $form );
}
/**
 * Admin config function to allow customization of the site heading on phones
 */
function idMyGadget_admin_heading( $gadget_type )
{
	global $jmwsIdMyGadget;
	checkJmwsIdMyGadgetObject();

	$radio_choices = $jmwsIdMyGadget->translatedRadioChoices;
	$default_radio_choice = $radio_choices[0];
	$valid_elements = JmwsIdMyGadgetDrupal::$validElements;
	$default_valid_element = $valid_elements[0];

	$gadget_type_plural = $gadget_type . 's';
	$gadget_type_ucfirst = ucfirst( $gadget_type );
	$gadget_type_plural_ucfirst = ucfirst( $gadget_type_plural );
	$form = array();

	$setting_name = 'idmg_logo_file_' . $gadget_type;     // e.g., 'idmg_logo_file_phone'
	// @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form[$setting_name] = array(
// 		'#type' => 'textfield',
// 		'#title' => t( 'Logo for ' . $gadget_type_plural_ucfirst ),
// 		'#default_value' => variable_get( $setting_name, '' ),
// 		'#size' => 100,
// 		'#maxlength' => 200,
// 		'#description' => t( 'The logo image to display on ' . $gadget_type_plural . '.' ),
// 		'#required' => FALSE,
// 	);

	//
	// FIXME: This logo file field doesn't seem to work, but it's a step in the right direction
	//
	$setting_name = 'idmg_logo_file_upload_' . $gadget_type;   // e.g., 'idmg_logo_file_upload_phone'
	// @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form[$setting_name] = array(
// 		'#type' => 'file',
// 	//	'#title' => t( 'Upload logo image for ' . $gadget_type_plural_ucfirst . '?' ),
// 		'#title' => t( 'WTF is wrong with this title thingie?' ),
// 		'#default_value' => variable_get( $setting_name, '' ),
// 		'#description' => t( 'Upload an image to display in the heading of this site on ' . $gadget_type_plural . '.' ),
// 	//	'#title_display' => 'invisible',
// 	//	'#title_display' => 'before',
// 		'#title_display' => 'after',
// 		'#size' => 22,
// 		'#theme_wrappers' => array(),
// 		'#required' => FALSE,
// 	);


	$setting_name = 'idmg_show_site_name_' . $gadget_type;   // e.g., 'idmg_show_site_name_phone'
	// @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form[$setting_name] = array(
// 		'#type' => 'radios',
// 		'#title' => t( 'Show Site Name on ' . $gadget_type_plural_ucfirst . '?' ),
// 		'#default_value' => variable_get( $setting_name, $default_radio_choice ),
// 		'#options' => $radio_choices,
// 		'#description' => t( 'Select whether you want the name of this site to display in the header on ' . $gadget_type_plural . '.' ),
// 		'#required' => TRUE,
// 	);


	$setting_name = 'idmg_site_name_element_' . $gadget_type;     // e.g., 'idmg_site_name_element_phone'
	// @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form[$setting_name] = array(
// 		'#type' => 'select',
// 		'#title' => t( 'Site Name Element ' . $gadget_type_ucfirst ),
// 		'#default_value' => variable_get( $setting_name, $default_valid_element ),
// 		'#options' => $valid_elements,
// 		'#description' => t( 'Select the html element in which you want to display the name of this site in the header on ' . $gadget_type_plural . '.' ),
// 		'#required' => FALSE,
// 	);


	$setting_name = 'idmg_site_title_' . $gadget_type;     // e.g., 'idmg_site_title_phone'
	// @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form[$setting_name] = array(
// 		'#type' => 'textfield',
// 		'#title' => t( 'Site Title on ' . $gadget_type_plural_ucfirst ),
// 		'#default_value' => variable_get( $setting_name, '' ),
// 		'#size' => 60,
// 		'#maxlength' => 100,
// 		'#description' => t( 'The site title to display on ' . $gadget_type_plural . '.' ),
// 		'#required' => FALSE,
// 	);


	$setting_name = 'idmg_site_title_element_' . $gadget_type;     // e.g., 'idmg_site_title_element_phone'
	// @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form[$setting_name] = array(
// 		'#type' => 'select',
// 		'#title' => t( 'Site Title Element ' . $gadget_type_ucfirst ),
// 		'#default_value' => variable_get( $setting_name, $default_valid_element ),
// 		'#options' => $valid_elements,
// 		'#description' => t( 'Select the html element in which you want to display the site title in the header on ' . $gadget_type_plural . '.' ),
// 		'#required' => FALSE,
// 	);


	$setting_name = 'idmg_site_description_' . $gadget_type;     // e.g., 'idmg_site_description_phone'
	// @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form[$setting_name] = array(
// 		'#type' => 'textfield',
// 		'#title' => t( 'Site Slogan on ' . $gadget_type_plural_ucfirst ),
// 		'#default_value' => variable_get( $setting_name, '' ),
// 		'#size' => 60,
// 		'#maxlength' => 100,
// 		'#description' => t('The site slogan to display on ' . $gadget_type_plural . '.'),
// 		'#required' => FALSE,
// 	);


	$setting_name = 'idmg_site_description_element_' . $gadget_type;     // e.g., 'idmg_site_description_element_phone'
	// @FIXME
// // @FIXME
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// $form[$setting_name] = array(
// 		'#type' => 'select',
// 		'#title' => t( 'Site Slogan Element ' . $gadget_type_ucfirst ),
// 		'#default_value' => variable_get( $setting_name, $default_valid_element ),
// 		'#options' => $valid_elements,
// 		'#description' => t( 'Select the html element in which you want to display the site slogan in the header on ' . $gadget_type_plural . '.' ),
// 		'#required' => FALSE,
// 	);


  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// variable_del( 'idmg_site_slogan_phone' );

  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// variable_del( 'idmg_site_slogan_tablet' );

  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// variable_del( 'idmg_site_slogan_desktop' );

  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// variable_del( 'idmg_site_slogan_element_phone' );

  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// variable_del( 'idmg_site_slogan_element_tablet' );

  // @FIXME
// // @FIXME
// // This looks like another module's variable. You'll need to rewrite this call
// // to ensure that it uses the correct configuration object.
// variable_del( 'idmg_site_slogan_element_desktop' );


//	return system_settings_form( $form );
	return $form;   // NOTE: calling fcn runs system_settings_form !!!
}
//
// ============================================
// ***  UNUSED CODE - PLEASE USE OR DELETE  ***
// ============================================
//
/**
 * Failed (so far) attempt to fix JS error we are seeing when using jQuery Mobile.
 * ============================
 * THIS CODE IS NOT BEING USED!
 * ============================
 * For details, see sites/all/modules/jmws/idMyGadget/js/readme.txt
 */
function idMyGadget_js_alter(&$javascript) {
  // Swap out jQuery to use an updated version of the library.
//  print '<p>$javascript["misc/jquery.js"]["data"] before: ' . $javascript['misc/jquery.js']['data'] . "</p>";
//  $javascript['misc/jquery.js']['data'] = drupal_get_path('module', 'idMyGadget') . 'js/jquery-1.6.4.js';
//  print '<p>$javascript["misc/jquery.js"]["data"] after: ' . $javascript['misc/jquery.js']['data'] . "</p>";
}

/**
 * Allows us to see what is in $page
 * Reference: https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_page_alter/7
 * NOTES:
 *   This same function is in stark_idMyGadget/template.php
 *   ------------------------------------------------------------
 *   This does NOTHING when we have "_NOT" appended to the name!!
 *   ------------------------------------------------------------
 */
function idMyGadget_page_alter_NOT( &$page ) {
  print '<p>Entering idMyGadget_page_alter_NOT (in the module)</p>';

  print '<p>';
  if ( isset($page['page_top']) ) {
    print '<span style="color:red;">************************************** var_dump-ing page[page_top]</p>';
    print '<p>';
    var_dump( $page['page_top'] ); 
    print '</p><p style="color:red;">************************************** end of page[page_top]</p>';
  } else {
    print 'page[page_top] is not set.';
  }
  print '</p>';

  print '<p>';
  if ( isset($page['header']) ) {
    print '<span style="color:red;">************************************** var_dump-ing page[header]</p>';
    print '<p>';
    var_dump( $page['header'] ); 
    print '</p><p style="color:red;">************************************** end of page[header]</p>';
  } else {
    print 'page[header] is not set.';
  }
  print '</p>';

  print '<p>';
  if ( isset($page['sidebar_first']) ) {
    print '<span style="color:red;">************************************** var_dump-ing page[sidebar_first]</p>';
    print '<p>';
    var_dump( $page['sidebar_first'] ); 
    print '</p><p style="color:red;">************************************** end of page[sidebar_first]</p>';
  } else {
    print 'page[sidebar_first] is not set.';
  }
  print '</p>';

  print '<p>';
  if ( isset($page['content']) ) {
    print '<span style="color:red;">************************************** var_dump-ing page[content]</p>';
    print '<p>';
    var_dump( $page['content'] ); 
    print '</p><p style="color:red;">************************************** end of page[content]</p>';
  } else {
    print 'page[content] is not set.';
  }
  print '</p>';

  print '<p>';
  if ( isset($page['sidebar_second']) ) {
    print '<span style="color:red;">************************************** var_dump-ing page[sidebar_second]</p>';
    print '<p>';
    var_dump( $page['sidebar_second'] ); 
    print '</p><p style="color:red;">************************************** end of page[sidebar_second]</p>';
  } else {
    print 'page[sidebar_second] is not set.';
  }
  print '</p>';

  print '<p>';
  if ( isset($page['page_bottom']) ) {
    print '<span style="color:red;">************************************** var_dump-ing page[page_bottom]</span></p>';
    print '<p>';
    var_dump( $page['page_bottom'] );
    print '</p><p style="color:red;">************************************** end of page[page_bottom]</p>';
  } else {
    print 'page[page_bottom] is not set.';
  }
  print '</p>';

  print '<p>Leaving idMyGadget_page_alter_NOT (in the module)</p>';
}
